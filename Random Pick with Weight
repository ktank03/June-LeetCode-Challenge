Given an array w of positive integers, where w[i] describes the weight of index i, write a function pickIndex which randomly picks an index in proportion to its weight.

Note:

1 <= w.length <= 10000
1 <= w[i] <= 10^5
pickIndex will be called at most 10000 times.
Example 1:

Input: 
["Solution","pickIndex"]
[[[1]],[]]
Output: [null,0]
Example 2:

Input: 
["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]
[[[1,3]],[],[],[],[],[]]
Output: [null,0,1,1,1,0]
Explanation of Input Syntax:

The input is two lists: the subroutines called and their arguments. Solution's constructor has one argument, the array w. pickIndex has no arguments. Arguments are always wrapped with a list, even if there aren't any.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


class Solution {
    
    double n[];
    int len;
    public Solution(int[] w) {
        int sum = 0;
        len = w.length;
        n = new double[len];
        for(int i=0; i<len;i++){
            sum += w[i];
        }
        n[0]=((double)w[0])/sum;
        for(int i=1; i<len;i++){
            n[i]=n[i-1]+((double) w[i])/sum;
        }
    }
    
    public int pickIndex() {
        double q = Math.random();
        int l=0;
        int r=len-1;
        int mid;
        while(r>=l){
            mid = (r+l)/2;
            if((mid == 0 && q<=n[0]) || (q<=n[mid] && q>n[mid-1])){
                return mid;
            } else if (q> n[mid]){
                l=mid+1;
            } else {
                r=mid-1;
            }
        }
        return 0;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(w);
 * int param_1 = obj.pickIndex();
 */

Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:

Si % Sj = 0 or Sj % Si = 0.

If there are multiple solutions, return any subset is fine.

Example 1:

Input: [1,2,3]
Output: [1,2] (of course, [1,3] will also be ok)
Example 2:

Input: [1,2,4,8]
Output: [1,2,4,8]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int n = nums.length;
        if(n==0)
            return new ArrayList<Integer>();
        int divCount[] = new int[n]; 
        Arrays.fill(divCount, 1);  
        int prev[] = new int[n]; 
        Arrays.fill(prev, -1); 
        Arrays.sort(nums);
        int max_ind = 0; 
        for (int i = 1; i < n; i++) { 
            for (int j = 0; j < i; j++) { 

                if (nums[i] % nums[j] == 0 &&  divCount[i] < divCount[j] + 1) { 
                    prev[i] = j; 
                    divCount[i] = divCount[j] + 1; 
                } 
  
            }  
            if (divCount[i] > divCount[max_ind]) 
                max_ind = i; 
        }
        List<Integer> a = new ArrayList<Integer>();
        while(max_ind>=0){
            a.add(nums[max_ind]);
            max_ind = prev[max_ind];
        }
        return a;
    }
}
